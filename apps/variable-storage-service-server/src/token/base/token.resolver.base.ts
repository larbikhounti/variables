/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Token } from "./Token";
import { TokenCountArgs } from "./TokenCountArgs";
import { TokenFindManyArgs } from "./TokenFindManyArgs";
import { TokenFindUniqueArgs } from "./TokenFindUniqueArgs";
import { CreateTokenArgs } from "./CreateTokenArgs";
import { UpdateTokenArgs } from "./UpdateTokenArgs";
import { DeleteTokenArgs } from "./DeleteTokenArgs";
import { User } from "../../user/base/User";
import { TokenService } from "../token.service";
@graphql.Resolver(() => Token)
export class TokenResolverBase {
  constructor(protected readonly service: TokenService) {}

  async _tokensMeta(
    @graphql.Args() args: TokenCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Token])
  async tokens(@graphql.Args() args: TokenFindManyArgs): Promise<Token[]> {
    return this.service.tokens(args);
  }

  @graphql.Query(() => Token, { nullable: true })
  async token(
    @graphql.Args() args: TokenFindUniqueArgs
  ): Promise<Token | null> {
    const result = await this.service.token(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Token)
  async createToken(@graphql.Args() args: CreateTokenArgs): Promise<Token> {
    return await this.service.createToken({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Token)
  async updateToken(
    @graphql.Args() args: UpdateTokenArgs
  ): Promise<Token | null> {
    try {
      return await this.service.updateToken({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Token)
  async deleteToken(
    @graphql.Args() args: DeleteTokenArgs
  ): Promise<Token | null> {
    try {
      return await this.service.deleteToken(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: Token): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
