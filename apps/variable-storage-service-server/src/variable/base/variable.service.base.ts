/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Variable as PrismaVariable,
  User as PrismaUser,
} from "@prisma/client";

export class VariableServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.VariableCountArgs, "select">): Promise<number> {
    return this.prisma.variable.count(args);
  }

  async variables(
    args: Prisma.VariableFindManyArgs
  ): Promise<PrismaVariable[]> {
    return this.prisma.variable.findMany(args);
  }
  async variable(
    args: Prisma.VariableFindUniqueArgs
  ): Promise<PrismaVariable | null> {
    return this.prisma.variable.findUnique(args);
  }
  async createVariable(
    args: Prisma.VariableCreateArgs
  ): Promise<PrismaVariable> {
    return this.prisma.variable.create(args);
  }
  async updateVariable(
    args: Prisma.VariableUpdateArgs
  ): Promise<PrismaVariable> {
    return this.prisma.variable.update(args);
  }
  async deleteVariable(
    args: Prisma.VariableDeleteArgs
  ): Promise<PrismaVariable> {
    return this.prisma.variable.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.variable
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
