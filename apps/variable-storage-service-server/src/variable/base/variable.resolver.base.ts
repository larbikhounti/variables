/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Variable } from "./Variable";
import { VariableCountArgs } from "./VariableCountArgs";
import { VariableFindManyArgs } from "./VariableFindManyArgs";
import { VariableFindUniqueArgs } from "./VariableFindUniqueArgs";
import { CreateVariableArgs } from "./CreateVariableArgs";
import { UpdateVariableArgs } from "./UpdateVariableArgs";
import { DeleteVariableArgs } from "./DeleteVariableArgs";
import { User } from "../../user/base/User";
import { VariableService } from "../variable.service";
@graphql.Resolver(() => Variable)
export class VariableResolverBase {
  constructor(protected readonly service: VariableService) {}

  async _variablesMeta(
    @graphql.Args() args: VariableCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Variable])
  async variables(
    @graphql.Args() args: VariableFindManyArgs
  ): Promise<Variable[]> {
    return this.service.variables(args);
  }

  @graphql.Query(() => Variable, { nullable: true })
  async variable(
    @graphql.Args() args: VariableFindUniqueArgs
  ): Promise<Variable | null> {
    const result = await this.service.variable(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Variable)
  async createVariable(
    @graphql.Args() args: CreateVariableArgs
  ): Promise<Variable> {
    return await this.service.createVariable({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Variable)
  async updateVariable(
    @graphql.Args() args: UpdateVariableArgs
  ): Promise<Variable | null> {
    try {
      return await this.service.updateVariable({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Variable)
  async deleteVariable(
    @graphql.Args() args: DeleteVariableArgs
  ): Promise<Variable | null> {
    try {
      return await this.service.deleteVariable(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: Variable): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
