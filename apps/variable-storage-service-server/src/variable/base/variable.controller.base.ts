/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VariableService } from "../variable.service";
import { VariableCreateInput } from "./VariableCreateInput";
import { Variable } from "./Variable";
import { VariableFindManyArgs } from "./VariableFindManyArgs";
import { VariableWhereUniqueInput } from "./VariableWhereUniqueInput";
import { VariableUpdateInput } from "./VariableUpdateInput";

export class VariableControllerBase {
  constructor(protected readonly service: VariableService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Variable })
  async createVariable(
    @common.Body() data: VariableCreateInput
  ): Promise<Variable> {
    return await this.service.createVariable({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        key: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        value: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Variable] })
  @ApiNestedQuery(VariableFindManyArgs)
  async variables(@common.Req() request: Request): Promise<Variable[]> {
    const args = plainToClass(VariableFindManyArgs, request.query);
    return this.service.variables({
      ...args,
      select: {
        createdAt: true,
        id: true,
        key: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        value: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Variable })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async variable(
    @common.Param() params: VariableWhereUniqueInput
  ): Promise<Variable | null> {
    const result = await this.service.variable({
      where: params,
      select: {
        createdAt: true,
        id: true,
        key: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        value: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Variable })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVariable(
    @common.Param() params: VariableWhereUniqueInput,
    @common.Body() data: VariableUpdateInput
  ): Promise<Variable | null> {
    try {
      return await this.service.updateVariable({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          key: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },

          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Variable })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVariable(
    @common.Param() params: VariableWhereUniqueInput
  ): Promise<Variable | null> {
    try {
      return await this.service.deleteVariable({
        where: params,
        select: {
          createdAt: true,
          id: true,
          key: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },

          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
